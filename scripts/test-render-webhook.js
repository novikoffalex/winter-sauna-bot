#!/usr/bin/env node

const axios = require('axios');

async function testRenderWebhook() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –Ω–∞ Render...\n');

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  const webhookUrl = await new Promise((resolve) => {
    rl.question('–í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Render (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://lark-ai-bot.onrender.com): ', resolve);
  });

  rl.close();

  if (!webhookUrl) {
    console.log('‚ùå URL –Ω–µ —É–∫–∞–∑–∞–Ω');
    return;
  }

  const fullWebhookUrl = webhookUrl.endsWith('/webhook') ? webhookUrl : `${webhookUrl}/webhook`;

  console.log(`üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${fullWebhookUrl}\n`);

  // –¢–µ—Å—Ç 1: Health Check
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...');
  try {
    const healthUrl = webhookUrl.replace('/webhook', '/health');
    const response = await axios.get(healthUrl, { timeout: 10000 });
    
    if (response.data.status === 'ok') {
      console.log('‚úÖ Health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('‚ùå Health check –Ω–µ –ø—Ä–æ—à–µ–ª');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ health check:', error.message);
  }

  // –¢–µ—Å—Ç 2: URL Verification
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL verification...');
  try {
    const response = await axios.post(fullWebhookUrl, {
      type: 'url_verification',
      challenge: 'test-challenge-123'
    }, { timeout: 10000 });
    
    if (response.data.challenge === 'test-challenge-123') {
      console.log('‚úÖ URL verification –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('‚ùå URL verification –Ω–µ –ø—Ä–æ—à–µ–ª');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ URL verification:', error.message);
  }

  // –¢–µ—Å—Ç 3: Message Event
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ message event...');
  try {
    const messageEvent = {
      type: 'event_callback',
      event: {
        type: 'im.message.receive_v1',
        message: {
          message_id: 'test-message-123',
          chat_id: 'test-chat-123',
          message_type: 'text',
          content: '{"text":"–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç!"}',
          mentions: []
        },
        sender: {
          sender_id: 'test-user-123',
          sender_type: 'user'
        }
      }
    };

    const response = await axios.post(fullWebhookUrl, messageEvent, { timeout: 10000 });
    
    if (response.data.status === 'ok') {
      console.log('‚úÖ Message event –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('‚ùå Message event –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ message event:', error.message);
  }

  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìã –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ:');
  console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ webhook URL –≤—ã—à–µ');
  console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Lark Open Platform');
  console.log('3. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö webhook —É–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL');
  console.log('4. –í–∫–ª—é—á–∏—Ç–µ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∏"');
  console.log('5. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É Lark');
}

if (require.main === module) {
  testRenderWebhook().catch(console.error);
}

module.exports = testRenderWebhook;
