#!/usr/bin/env node

const { execSync } = require('child_process');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function deployToRender() {
  console.log('üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Lark AI Bot –Ω–∞ Render\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Git
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Git...');
    try {
      execSync('git --version', { stdio: 'pipe' });
      console.log('‚úÖ Git –Ω–∞–π–¥–µ–Ω');
    } catch (error) {
      console.log('‚ùå Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É');
      process.exit(1);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    try {
      execSync('git status', { stdio: 'pipe' });
      console.log('‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω');
    } catch (error) {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');
      execSync('git init', { stdio: 'pipe' });
      execSync('git add .', { stdio: 'pipe' });
      execSync('git commit -m "Initial commit"', { stdio: 'pipe' });
      console.log('‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log('\nüìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    const larkAppId = await question('Lark App ID: ');
    const larkAppSecret = await question('Lark App Secret: ');
    const openaiKey = await question('OpenAI API Key: ');
    
    const webhookToken = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
    
    console.log('\nüîó –ü–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤–∞—à webhook URL –±—É–¥–µ—Ç:');
    console.log('https://your-app-name.onrender.com/webhook');
    console.log('(–∑–∞–º–µ–Ω–∏—Ç–µ your-app-name –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)');

    // –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    const envContent = `# Render Production Environment
NODE_ENV=production
PORT=10000

# Lark Bot Configuration
LARK_APP_ID=${larkAppId}
LARK_APP_SECRET=${larkAppSecret}
LARK_WEBHOOK_URL=https://your-app-name.onrender.com/webhook

# OpenAI Configuration
OPENAI_API_KEY=${openaiKey}
OPENAI_MODEL=gpt-4

# Security
WEBHOOK_VERIFICATION_TOKEN=${webhookToken}
`;

    require('fs').writeFileSync('.env', envContent);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª');

    // –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    execSync('git add .', { stdio: 'pipe' });
    execSync('git commit -m "Add Render configuration"', { stdio: 'pipe' });
    console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã');

    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Render!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://render.com');
    console.log('2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç (–∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π)');
    console.log('3. –ù–∞–∂–º–∏—Ç–µ "New +" ‚Üí "Web Service"');
    console.log('4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π');
    console.log('5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log(`   - LARK_APP_ID: ${larkAppId}`);
    console.log(`   - LARK_APP_SECRET: ${larkAppSecret}`);
    console.log(`   - OPENAI_API_KEY: ${openaiKey}`);
    console.log(`   - WEBHOOK_VERIFICATION_TOKEN: ${webhookToken}`);
    console.log('   - LARK_WEBHOOK_URL: https://your-app-name.onrender.com/webhook');
    console.log('6. –ù–∞–∂–º–∏—Ç–µ "Create Web Service"');
    console.log('7. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è');
    console.log('8. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–∏—Ç–µ LARK_WEBHOOK_URL');
    console.log('9. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook –≤ Lark Open Platform');

    console.log('\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:');
    console.log('- Render Dashboard: https://dashboard.render.com');
    console.log('- Lark Open Platform: https://open.larksuite.com');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    rl.close();
  }
}

if (require.main === module) {
  deployToRender();
}

module.exports = deployToRender;
