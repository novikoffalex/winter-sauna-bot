#!/usr/bin/env node

const { execSync } = require('child_process');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function quickDeploy() {
  console.log('üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Lark AI Bot –Ω–∞ Laravel Cloud\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Laravel CLI
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Laravel CLI...');
    try {
      execSync('laravel --version', { stdio: 'pipe' });
      console.log('‚úÖ Laravel CLI –Ω–∞–π–¥–µ–Ω');
    } catch (error) {
      console.log('‚ùå Laravel CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:');
      console.log('composer global require laravel/installer');
      process.exit(1);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    try {
      execSync('laravel cloud:auth:status', { stdio: 'pipe' });
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Laravel Cloud');
    } catch (error) {
      console.log('‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: laravel cloud:auth:login');
      process.exit(1);
    }

    // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const appName = await question('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): ') || `lark-ai-bot-${Date.now()}`;
    const larkAppId = await question('Lark App ID: ');
    const larkAppSecret = await question('Lark App Secret: ');
    const openaiKey = await question('OpenAI API Key: ');
    
    const webhookToken = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
    const webhookUrl = `https://${appName}.laravelcloud.com/webhook`;

    console.log('\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    try {
      execSync(`laravel cloud:apps:create "${appName}" --region=us-east-1`, { stdio: 'pipe' });
      console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
    } catch (error) {
      console.log('‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è');
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envVars = [
      `LARK_APP_ID=${larkAppId}`,
      `LARK_APP_SECRET=${larkAppSecret}`,
      `OPENAI_API_KEY=${openaiKey}`,
      `WEBHOOK_VERIFICATION_TOKEN=${webhookToken}`,
      `LARK_WEBHOOK_URL=${webhookUrl}`,
      'NODE_ENV=production',
      'PORT=8000'
    ];

    for (const envVar of envVars) {
      try {
        execSync(`laravel cloud:env:set ${envVar} --app="${appName}"`, { stdio: 'pipe' });
      } catch (error) {
        console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: ${envVar}`);
      }
    }

    console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

    // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º
    console.log('üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ...');
    try {
      execSync(`laravel cloud:deploy --app="${appName}"`, { stdio: 'inherit' });
      console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ!');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è');
      process.exit(1);
    }

    console.log('\nüéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log(`üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${appName}`);
    console.log(`üîó Webhook URL: ${webhookUrl}`);
    console.log(`üîë –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${webhookToken}`);
    
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ webhook URL –≤—ã—à–µ');
    console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Lark Open Platform');
    console.log('3. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö webhook —É–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL');
    console.log('4. –í–∫–ª—é—á–∏—Ç–µ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∏"');
    console.log('5. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É Lark');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    rl.close();
  }
}

if (require.main === module) {
  quickDeploy();
}

module.exports = quickDeploy;
